-- Automatically generated by SQLQueryTestSuite
-- Number of queries: 11


-- !query 0
create or replace temporary view nested as values
  (1, array(32, 97), array(array(12, 99), array(123, 42), array(1))),
  (2, array(77, -76), array(array(6, 96, 65), array(-1, -2))),
  (3, array(12), array(array(17)))
  as t(x, ys, zs)
-- !query 0 schema
struct<>
-- !query 0 output



-- !query 1
select upper(x -> x) as v
-- !query 1 schema
struct<>
-- !query 1 output
org.apache.spark.sql.AnalysisException
A lambda function should only be used in a higher order function. However, its class is org.apache.spark.sql.catalyst.expressions.Upper, which is not a higher order function.; line 1 pos 7


-- !query 2
select transform(zs, z -> z) as v from nested
-- !query 2 schema
struct<v:array<array<int>>>
-- !query 2 output
[[12,99],[123,42],[1]]
[[17]]
[[6,96,65],[-1,-2]]


-- !query 3
select transform(ys, y -> y * y) as v from nested
-- !query 3 schema
struct<v:array<int>>
-- !query 3 output
[1024,9409]
[144]
[5929,5776]


-- !query 4
select transform(ys, (y, i) -> y + i) as v from nested
-- !query 4 schema
struct<v:array<int>>
-- !query 4 output
[12]
[32,98]
[77,-75]


-- !query 5
select transform(zs, z -> concat(ys, z)) as v from nested
-- !query 5 schema
struct<v:array<array<int>>>
-- !query 5 output
[[12,17]]
[[32,97,12,99],[32,97,123,42],[32,97,1]]
[[77,-76,6,96,65],[77,-76,-1,-2]]


-- !query 6
select transform(ys, 0) as v from nested
-- !query 6 schema
struct<v:array<int>>
-- !query 6 output
[0,0]
[0,0]
[0]


-- !query 7
select transform(cast(null as array<int>), x -> x + 1) as v
-- !query 7 schema
struct<v:array<int>>
-- !query 7 output
NULL


-- !query 8
select filter(ys, y -> y > 30) as v from nested
-- !query 8 schema
struct<v:array<int>>
-- !query 8 output
[32,97]
[77]
[]


-- !query 9
select filter(cast(null as array<int>), y -> true) as v
-- !query 9 schema
struct<v:array<int>>
-- !query 9 output
NULL


-- !query 10
select transform(zs, z -> filter(z, zz -> zz > 50)) as v from nested
-- !query 10 schema
struct<v:array<array<int>>>
-- !query 10 output
[[96,65],[]]
[[99],[123],[]]
[[]]
